// Code generated by csv2go; DO NOT EDIT.

package {{ .Package }}

import (
	"encoding/csv"
	"errors"
	"io"
	"sync"
)
{{ range $s := .Structs }}
type {{ $s.Name }}CSV struct {
	ch chan {{ $s.Name }}
	once sync.Once
}

func (t {{ $s.Name }}CSV) ReadChan() <-chan {{ $s.Name }} {
	t.once.Do(func() { t.ch = make(chan {{ $s.Name }}) })
	return t.ch
}

func (t {{ $s.Name }}CSV) UnmarshalCSV(r *csv.Reader) error {
	t.once.Do(func() { t.ch = make(chan {{ $s.Name }}) })
	defer close(t.ch)

	header, err := r.Read()
	if err != nil {
		return err
	}

	for {
		record, err := r.Read()
		if err != nil {
			if errors.Is(err, io.EOF) {
				return nil
			}
			return err
		}

		var s {{ $s.Name }}
		for i, h := range header {
			v := record[i]
			switch h {
{{- range $f := $s.Fields }}
			case "{{ $f.Tag }}":
{{- range $name := $f.Names }}
				s.{{ $name }} = v
{{- end }}
{{- end }}
			}
		}
		t.ch <- s
	}
}
{{ end -}}
